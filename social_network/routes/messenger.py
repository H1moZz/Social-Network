from flask import Blueprint, jsonify, request, current_app
from flask_restful import Api, reqparse
from flask_cors import CORS
from social_network.app import db
from social_network.models import Chat, Message, User, chat_participants
from social_network.routes.AuntResource import AuthenticatedResource
from social_network.routes.web_socket import socketio
from datetime import datetime
import os
from werkzeug.utils import secure_filename

messenger_bp = Blueprint('messenger', __name__)
CORS(messenger_bp, supports_credentials=True, resources={r"/api/*": {"origins": "*"}})
messenger_api = Api(messenger_bp)

# –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
chat_parser = reqparse.RequestParser()
chat_parser.add_argument('participant_id', type=int, required=True)

# –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
message_parser = reqparse.RequestParser()
message_parser.add_argument('content', type=str, required=True)

# –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
message_edit_parser = reqparse.RequestParser()
message_edit_parser.add_argument('content', type=str, required=True)

# –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
ALLOWED_EXTENSIONS = {
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    'png', 'jpg', 'jpeg', 'gif',
    # –í–∏–¥–µ–æ
    'mp4', 'mov', 'avi',
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    'pdf', 'doc', 'docx', 'xls', 'xlsx',
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    'txt', 'csv',
    # –ê—Ä—Ö–∏–≤—ã
    'zip', 'rar'
}

def allowed_file(filename):
    if not filename:
        return False
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_file_type(filename):
    if not filename or '.' not in filename:
        return 'document'
    
    ext = filename.rsplit('.', 1)[1].lower()
    if ext in {'png', 'jpg', 'jpeg', 'gif'}:
        return 'image'
    elif ext in {'mp4', 'mov', 'avi'}:
        return 'video'
    else:
        return 'document'

class ChatListResource(AuthenticatedResource): 
    def get(self):
        current_user_id = request.user_id 
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–≤—è–∑—å –≤ –º–æ–¥–µ–ª–∏ Chat
        user = User.query.get(current_user_id)
        if not user:
            return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, 404
            
        chat_list = []
        
        for chat in user.chats:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            participant = db.session.query(User).join(chat_participants).filter(
                chat_participants.c.chat_id == chat.id,
                User.id != current_user_id
            ).first()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
            if not participant:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_message = Message.query.filter_by(chat_id=chat.id).order_by(Message.timestamp.desc()).first()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            unread_count = Message.query.filter_by(
                chat_id=chat.id,
                is_read=False
            ).filter(Message.sender_id != current_user_id).count()
            
            last_message_content = None
            if last_message:
                if last_message.media_type == 'image':
                    last_message_content = 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                elif last_message.media_type == 'video':
                    last_message_content = 'üé• –í–∏–¥–µ–æ'
                elif last_message.media_type == 'document':
                    last_message_content = 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç'
                else:
                    last_message_content = last_message.content
            
            chat_info = {
                'id': chat.id,
                'participant': {
                    'id': participant.id,
                    'username': participant.username,
                    'avatar': participant.avatar,
                    'profession': participant.profession,
                    'is_deleted': participant.is_deleted
                },
                'last_message': {
                    'content': last_message_content,
                    'timestamp': last_message.timestamp.isoformat() if last_message else None,
                    'is_read': last_message.is_read if last_message else None,
                    'sender_id': last_message.sender_id if last_message else None,
                    'media_type': last_message.media_type if last_message else None
                } if last_message else None,
                'unread_count': unread_count
            }
            chat_list.append(chat_info)
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_list.sort(
            key=lambda x: x['last_message']['timestamp'] if x['last_message'] else '0', 
            reverse=True
        )
        
        return jsonify(chat_list)

    def post(self):
        current_user_id = request.user_id
        args = chat_parser.parse_args()
        participant_id = args['participant_id']

        participant = User.query.get(participant_id)
        if not participant:
            return {'error': '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}, 404
        
        chat = Chat.get_or_create_personal_chat(current_user_id, participant.id)
        participant = next((p for p in chat.participants if p.id != current_user_id), None)

        return {'id': chat.id,
                'participant': {
                'avatar': participant.avatar,
                'username': participant.username,
                'profession': participant.profession}},201

class MessageListResource(AuthenticatedResource):
    def get(self, chat_id):
        current_user_id = request.user_id
        chat = Chat.query.get_or_404(chat_id)

        if current_user_id not in [user.id for user in chat.participants]:
            return {'error': '–í—ã –Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ'}, 403

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        unread_messages = Message.query.filter_by(chat_id=chat_id) \
            .filter(Message.sender_id != current_user_id) \
            .filter_by(is_read=False) \
            .all()

        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Message.query.filter_by(chat_id=chat_id) \
            .filter(Message.sender_id != current_user_id) \
            .filter_by(is_read=False) \
            .update({Message.is_read: True})
        db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in unread_messages:
            socketio.emit('message_status_updated', {
                'message_id': message.id,
                'chat_id': chat_id,
                'is_read': True
            }, room=str(chat_id))

        before = request.args.get('before', type=int)

        if before:
            messages = Message.query.filter_by(chat_id=chat_id) \
                .filter(Message.id < before) \
                .order_by(Message.id.desc(), Message.id.desc()) \
                .limit(30) \
                .all()
        else:
            messages = Message.query.filter_by(chat_id=chat_id) \
                .order_by(Message.id.desc(), Message.id.desc()) \
                .limit(30) \
                .all()

        return jsonify({
            'messages': [{
                'message_id': msg.id,
                'content': msg.content,
                'media_path': msg.media_path,
                'media_type': msg.media_type,
                'file_name': msg.file_name,
                'file_size': msg.file_size,
                'sender_id': msg.sender_id,
                'timestamp': msg.timestamp.isoformat(),
                'is_read': msg.is_read,
                'edited': msg.edited
            } for msg in reversed(messages)],
            'meta': {
                'has_more': len(messages) == 30
            }
        })

    def post(self, chat_id):
        current_user_id = request.user_id
        chat = Chat.query.get_or_404(chat_id)

        if current_user_id not in [user.id for user in chat.participants]:
            return {'error': '–í—ã –Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ'}, 403

        content = request.form.get('content', '')
        file = request.files.get('media')

        media_path = None
        media_type = None
        file_name = None
        file_size = None

        if file and allowed_file(file.filename):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_name = file.filename
            file_size = os.fstat(file.fileno()).st_size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (50MB)
            if file_size > 50 * 1024 * 1024:
                return {'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50–ú–ë'}, 400

            media_type = get_file_type(file.filename)

            folder = os.path.join(current_app.static_folder, 'media')
            os.makedirs(folder, exist_ok=True)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(file.filename)[1]
            timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ
            filename = f"{current_user_id}_{timestamp}{file_ext}"
            filepath = os.path.join(folder, filename)

            file.save(filepath)

            media_path = f"/static/media/{filename}"

        if not content and not media_path:
            return {'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}, 400

        message = Message(
            content=content,
            sender_id=current_user_id,
            chat_id=chat_id,
            media_path=media_path,
            media_type=media_type,
            file_name=file_name,
            file_size=file_size
        )

        db.session.add(message)
        db.session.commit()

        message_data = {
            'message_id': message.id,
            'content': message.content,
            'sender_id': current_user_id,
            'chat_id': chat_id,
            'timestamp': message.timestamp.isoformat(),
            'is_read': False,
            'media_path': media_path,
            'media_type': media_type,
            'file_name': file_name,
            'file_size': file_size
        }

        socketio.emit('new_message_sended', message_data, room=str(chat_id))

        for participant in chat.participants:
            if participant.id != current_user_id:
                socketio.emit('chat_updated', message_data, room=f'user_{participant.id}')

        return {'message_id': message.id}, 201

class MessageResource(AuthenticatedResource):
    def put(self, chat_id, message_id):
        current_user_id = request.user_id
        message = Message.query.get_or_404(message_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.sender_id != current_user_id:
            return {'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}, 403
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∞—Ç—É
        if message.chat_id != chat_id:
            return {'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ'}, 404
            
        args = message_edit_parser.parse_args()
        message.content = args['content']
        message.edited = True  # –î–æ–±–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        socketio.emit('message_edited', {
            'message_id': message.id,
            'chat_id': message.chat_id,
            'content': message.content,
            'edited': True
        }, room=str(chat_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —á–∞—Ç–µ
        last_message = Message.query.filter_by(chat_id=chat_id)\
            .order_by(Message.timestamp.desc())\
            .first()
            
        if last_message and last_message.id == message_id:
            socketio.emit('chat_updated', {
                'message_id': message.id,
                'content': message.content,
                'sender_id': message.sender_id,
                'chat_id': chat_id,
                'timestamp': message.timestamp.isoformat(),
                'is_read': message.is_read
            }, room=str(chat_id))
        
        return {
            'message_id': message.id,
            'content': message.content,
            'edited': True
        }

    def delete(self, chat_id, message_id):
        current_user_id = request.user_id
        message = Message.query.get_or_404(message_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.sender_id != current_user_id:
            return {'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}, 403
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —á–∞—Ç—É
        if message.chat_id != chat_id:
            return {'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ'}, 404

        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if message.media_path:
            try:
                file_path = os.path.join(current_app.static_folder, message.media_path.lstrip('/static/'))
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.session.delete(message)
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        socketio.emit('message_deleted', {
            'message_id': message_id,
            'chat_id': chat_id
        }, room=str(chat_id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —á–∞—Ç–µ
        last_message = Message.query.filter_by(chat_id=chat_id)\
            .order_by(Message.timestamp.desc())\
            .first()
            
        if last_message:
            socketio.emit('chat_updated', {
                'message_id': last_message.id,
                'content': last_message.content,
                'sender_id': last_message.sender_id,
                'chat_id': chat_id,
                'timestamp': last_message.timestamp.isoformat(),
                'is_read': last_message.is_read
            }, room=str(chat_id))
        
        return {'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'}, 200

class UserSearchResource(AuthenticatedResource):
    def get(self):
        current_user_id = request.user_id
        query = request.args.get('query', '').strip()
        
        if not query:
            return {'users': []}, 200
            
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = User.query.filter(
            User.id != current_user_id,
            db.or_(
                User.username.ilike(f'%{query}%'),
                User.profession.ilike(f'%{query}%')
            )
        ).limit(10).all()
        
        return jsonify({
            'users': [{
                'id': user.id,
                'username': user.username,
                'avatar': user.avatar,
                'profession': user.profession
            } for user in users]
        })

class UserStatusResource(AuthenticatedResource):
    def get(self):
        current_user_id = request.user_id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        users = User.query.filter(
            User.id != current_user_id,
            User.is_deleted == False
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤
        online_users = {
            user.id: {
                'is_online': user.is_online,
                'last_seen': user.last_seen.isoformat() if user.last_seen else None
            }
            for user in users
        }
        
        return jsonify({
            'online_users': online_users
        })

messenger_api.add_resource(ChatListResource, '/chats')
messenger_api.add_resource(MessageListResource, '/chats/<int:chat_id>/messages')
messenger_api.add_resource(MessageResource, '/chats/<int:chat_id>/messages/<int:message_id>')
messenger_api.add_resource(UserSearchResource, '/users/search')
messenger_api.add_resource(UserStatusResource, '/users/online-status')
